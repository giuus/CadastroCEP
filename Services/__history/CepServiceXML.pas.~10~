// CepServiceXML.pas
unit CepServiceXML;

interface

uses
  ICepService, System.SysUtils, System.Net.HttpClient, Xml.XMLDoc, Xml.XMLIntf,System.Net.HttpClientComponent;

type
  TCepServiceXML = class(TInterfacedObject, ICepServices)
  public
    function ConsultarCepPorCep(const ACep: string): string;
    function ConsultarCepPorEndereco(const AEstado, ACidade, ALogradouro: string): string;
  end;

implementation

{ TCepServiceXML }

function TCepServiceXML.ConsultarCepPorCep(const ACep: string): string;
var
  HttpClient: TNetHTTPClient;
  Response: IHTTPResponse;
  XMLDoc: IXMLDocument;
  Logradouro, Bairro, Localidade, UF: string;
begin
  HttpClient := TNetHTTPClient.Create(nil);
  try
    Response := HttpClient.Get('https://viacep.com.br/ws/' + ACep + '/xml/');
    if Response.StatusCode = 200 then
    begin
      XMLDoc := TXMLDocument.Create(nil);
      try
        XMLDoc.LoadFromXML(Response.ContentAsString);
        XMLDoc.Active := True;
        Logradouro := XMLDoc.DocumentElement.ChildNodes['logradouro'].Text;
        Bairro := XMLDoc.DocumentElement.ChildNodes['bairro'].Text;
        Localidade := XMLDoc.DocumentElement.ChildNodes['localidade'].Text;
        UF := XMLDoc.DocumentElement.ChildNodes['uf'].Text;

        Result := Format('Logradouro: %s, Bairro: %s, Cidade: %s, UF: %s',
                         [Logradouro, Bairro, Localidade, UF]);
      finally
        XMLDoc := nil;
      end;
    end
    else
      raise Exception.CreateFmt('Erro ao consultar CEP (XML): %d - %s', [Response.StatusCode, Response.StatusText]);
  finally
    HttpClient.Free;
  end;
end;

function TCepServiceXML.ConsultarCepPorEndereco(const AEstado, ACidade, ALogradouro: string): string;
var
  HttpClient: TNetHTTPClient;
  Response: IHTTPResponse;
  URL, XML: string;
  XMLDoc: IXMLDocument;
  Logradouro, Bairro, Localidade, UF: string;
begin
  HttpClient := TNetHTTPClient.Create(nil);
  try
    // ViaCEP não suporta diretamente busca por endereço, mas para o MVP, consideramos um exemplo fictício
    URL := Format('https://viacep.com.br/ws/%s/%s/%s/xml/', [AEstado, ACidade, ALogradouro]);
    Response := HttpClient.Get(URL);
    if Response.StatusCode = 200 then
    begin
      XMLDoc := TXMLDocument.Create(nil);
      try
        XML := Response.ContentAsString;
        XML := StringReplace(XML, #$A, '', [rfReplaceAll]); // Remove ''#$A'';


        XMLDoc.LoadFromXML(XML);
        XMLDoc.Active := True;
        Logradouro := XMLDoc.DocumentElement.ChildNodes['logradouro'].Text;
        Bairro := XMLDoc.DocumentElement.ChildNodes['bairro'].Text;
        Localidade := XMLDoc.DocumentElement.ChildNodes['localidade'].Text;
        UF := XMLDoc.DocumentElement.ChildNodes['uf'].Text;

        Result := Format('Logradouro: %s, Bairro: %s, Cidade: %s, UF: %s',
                         [Logradouro, Bairro, Localidade, UF]);
      finally
        XMLDoc := nil;
      end;
    end
    else
      raise Exception.CreateFmt('Erro ao consultar CEP por endereço (XML): %d - %s', [Response.StatusCode, Response.StatusText]);
  finally
    HttpClient.Free;
  end;
end;

end.

